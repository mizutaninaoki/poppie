name: e2e CI

# CIを一時的に走らせたくない時、以下コメント解除
# on:
#   push:
#     branches-ignore:
#       - '**'

on:
  # push: push したら jobs を実行する。
  # workflow_dispatch: github で手動で実行可能にする。(テストを実行するのに、プッシュやプルリクを送りたくない場合に記述しておくと良い)
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    types: [opened, closed]
  workflow_dispatch:

jobs:
  test_e2e:
    # if: github.event.action == 'opened' || (github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    env:
      ENV_NAME: ${{secrets.ENV_NAME}}
      NODE_ENV: ${{secrets.NODE_ENV}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ENGINE: ${{secrets.ENGINE}}
      POSTGRES_DB: ${{secrets.POSTGRES_DB}}
      POSTGRES_USER: ${{secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
      DATABASE: ${{secrets.DATABASE}}
      DB_HOST: ${{secrets.DB_HOST}}
      DB_PORT: ${{secrets.DB_PORT}}
      AWS_S3_ACCESS_KEY_ID: ${{secrets.AWS_S3_ACCESS_KEY_ID}}
      AWS_S3_SECRET_ACCESS_KEY: ${{secrets.AWS_S3_SECRET_ACCESS_KEY}}
      AWS_STORAGE_BUCKET_NAME: ${{secrets.AWS_STORAGE_BUCKET_NAME}}
      AWS_REGION_NAME: ${{secrets.AWS_REGION_NAME}}
      ALLOWED_HOSTS: ${{secrets.ALLOWED_HOSTS}}
      CORS_ALLOWED_ORIGINS: ${{secrets.CORS_ALLOWED_ORIGINS}}
    steps:
      - uses: actions/checkout@v3
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: "14.17.5"
      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/frontend/node_modules
            ${{ github.workspace }}/frontend/.next/cache
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
            ${{ runner.os }}-
      # fonts-noto をインストールする(失敗時、Github Actionsのスクショで日本語が文字化けするのを直す)
      # - name: Install fonts-noto
      #   run: sudo apt install fonts-noto
      - name: Install Dependencies
        working-directory: ./frontend
        run: yarn install --frozen-lockfile --prefer-offline
      - name: Run Next.js Build
        working-directory: ./frontend
        env:
          # NODE_ENVをproductionにすると、yarn build(next build)でtypescriptとかがないのでエラーになるため、
          # NODE_ENVはdevelopmentを指定
          NODE_ENV: development
        run: yarn build
      - name: Set up docker
        run: docker-compose -f ./docker/e2e/docker-compose-e2e.yml up --build -d

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      # Djangoの環境をインストール
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/test.txt
          pip install pytest-django
      - name: Run migrations and seed
        run: ./seed.sh
      - name: Run Django
        # バックグランド実行
        # https://stackoverflow.com/questions/66877730/how-to-use-django-selenium-testing-in-github-actions
        # ポート番号を8000に指定しないと、環境変数に設定しているpostgresのポート番号で立ち上げてしまう。(Next.jsはpackage.jsonの中でPORTを3000に指定)
        run: python manage.py runserver 8000 &

      # Next.jsアプリを起動(バックグラウンド実行)
      - name: Start App
        working-directory: ./frontend
        run: yarn start &
      # Cypress実行
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          install: false
          working-directory: frontend
          wait-on: "http://localhost:3000"
      # Cypress実行時に生成されたビデオとスクリーンショットを保存
      - name: Save e2e screenshots at failure
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-logs
          path: |
            ${{ github.workspace }}/frontend/cypress/screenshots/
            ${{ github.workspace }}/frontend/cypress/videos/
          retention-days: 1
        if: failure()
        # if: failure() && steps.e2e_test.outcome == 'failure'
