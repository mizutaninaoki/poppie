# プロキシ先の指定
# Nginxが受け取ったリクエストをnextに送信
upstream app {
    # ソケット通信する場合はgunicorn.sockを指定
    # 下記はunix:// と ルートディレクトリの/を合わせてunix:///となっている

    # コンテナ間はhttp://(コンテナ名):(ポート番号)で相互にアクセスできるようになっているため、このような書き方になります。
    # server django:8000;
    # server next:3000;

    # ECS Fargateで動かす時は、タスク定義のネットワークモードをawsvpcにしているので、コンテナ間通信はlocalhostを指定する。
    # localhost:3000でnextのコンテナ、localhost:8000でdjangoのコンテナを指定できる。
    # see: https://book-reviews.blog/how_to_investigate_when_ECS_task_does_not_work/
    server localhost:8000;
}

server {
    listen 80;
    server_name localhost;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # ドキュメントルートの指定
    root /poppie/public;

    # ヘルスチェックのパス(200を返す)
    location = /health_check/ {
            access_log off;
            add_header 'Content-Type' 'application/json';
            return 200 '{"status":"Healthy"}';
    }

    # 一応.envなどの隠しファイルへのアクセスはnginxで禁止する（そもそも隠しファイルへはアクセスできないようにしておくこと！）
    location ~ /\. {
        deny all;
    }

    # 一応パブリック配下の.envなどの隠しファイルへのアクセスもnginxで禁止する（そもそも隠しファイルへはアクセスできないようにしておくこと！）
    location ~ /public/\. {
        deny all;
    }

    # TODO: 現在/poppie/staticfiles/にファイル配置していない状態
    location /static/ {
        alias /poppie/staticfiles/;
    }

    # TODO: 現在/poppie/staticfiles/にファイル配置していない状態
    location /media/ {
        alias /poppie/mediafiles/;
    }

    # # djangoに接続
    # location ~ ^/(admin) {
    #     proxy_pass http://localhost:8000;
    #     proxy_set_header Host $http_host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     proxy_redirect off;
    # }

    # リバースプロキシ設定
    # 参照：https://qiita.com/HeRo/items/7063b86b5e8a2efde0f4
    # X-Forwarded-Proto 転送するときのプロトコル
    location / {
        proxy_set_header X-Real-IP $remote_addr;
        index index.html index.htm;
        # ユーザーがhttpsでアクセスしても、nginx -> Railsにはhttpで渡している
        # 参照：https://qiita.com/take_webengineer/items/ddaf21366b68008ada3d
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        # proxy_set_header X-CSRF-Token $http_x_csrf_token; # CSRFをDjangoに渡す
        # httpsの終端はALBなので、nginxには必ずhttpでのアクセスになる。RailsはCSRFのチェックはプロトコルまで精査するので、request.base_urlにはブラウザ時点でのアクセスするURLのhttps://poppie.jpが入っており、
        # ただ$schemeにはALBでhttps -> httpに変換された後のhttpが入っていることになって、Rails側が「プロトコルがrequest.base_urlはhttpsなのに、httpでアクセスしてきて違いますよ！」とCSRFに引っかかってしまう。
        # ALB -> ECSへhttpでアクセスしてくる場合、X-Forwarded-Protoには「$http_x_forwarded_proto」を指定する。
        # $schemeやhttpsを指定してもCSRFエラーになり、ログインや新規登録ができなくなる。
        # 参照：https://qiita.com/HeRo/items/7063b86b5e8a2efde0f4
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-Host $host;
        proxy_redirect off;
        proxy_pass http://app;
    }

    client_max_body_size 100m; # アップロードできるファイルの最大サイズ
    error_page 404 /404.html;
    error_page 505 502 503 504 /500.html;
    try_files $uri/index.html $uri @poppie;
    keepalive_timeout 5;
}